#include <iostream>
#include <vector>
#include <queue>
#include <climits> 
using namespace std;

class Solution {
public:
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
    
        vector<vector<pair<int, int>>> adj(V);
        for (auto &e : edges) {
            int u = e[0];
            int v = e[1];
            int w = e[2];
            adj[u].push_back({v, w});
        }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> ans(V, INT_MAX);
        
        ans[src] = 0;
        pq.push({0, src});

        while (!pq.empty()) {
            int d = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            for (auto &vec : adj[node]) {
                int adjNode = vec.first;
                int dist = vec.second;

                if (d + dist < ans[adjNode]) {
                    ans[adjNode] = d + dist;
                    pq.push({d + dist, adjNode});
                }
            }
        }

        return ans;
    }
};



int main() {
    Solution sol;
    int V = 5;
    vector<vector<int>> edges = {
        {0, 1, 2},
        {0, 4, 1},
        {1, 2, 3},
        {4, 2, 2},
        {2, 3, 6}
    };
    int src = 0;

    vector<int> dist = sol.dijkstra(V, edges, src);
    for (int d : dist) {
        cout << d << " ";
    }
    cout << endl;
    return 0;
}
